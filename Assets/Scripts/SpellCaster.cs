using UnityEngine;
using System.Collections;
using System.IO;

using NLua;

public class SpellCaster : MonoBehaviour {

     public string source = @"
import 'System'
import 'UnityEngine'
import 'Assembly-CSharp'	-- The user-code assembly generated by Unity

function CastSpell()
	if Input.GetKey(KeyCode.N) then
		GameObject.Instantiate(sphere, transform.position, Quaternion.identity)
	end
end

";

     Lua env;

     public GameObject sphere;
     public Transform casting_point;

     void Awake()
     {
          string line;
          TextAsset textFile = Resources.Load("Test") as TextAsset;
      
          line = textFile.text;

          // source = @line;
          // source = @GameManager.instance.player.cached_spell["CastSpell"].ToString(); 
          

          env = new Lua();
          env.LoadCLRPackage();

          env["this"] = this;
          env["transform"] = casting_point;
          env["sphere"] = sphere; // Give the script access to the prefab.

          //System.Object[] result = new System.Object[0];
          try
          {
               //result = env.DoString(source);
               env.DoString(source);
          }
          catch (NLua.Exceptions.LuaException e)
          {
               Debug.LogError(FormatException(e), gameObject);
          }

     }

     void Start()
     {
          
          Call("Start");
     }

     void Update()
     {
          Call("CastSpell");
          Call("Update");
     }


     public System.Object[] Call(string function, params System.Object[] args)
     {
          System.Object[] result = new System.Object[0];
          if (env == null) return result;
          LuaFunction lf = env.GetFunction(function);
          if (lf == null) return result;
          try
          {
               // Note: calling a function that does not
               // exist does not throw an exception.
               if (args != null)
               {
                    result = lf.Call(args);
               }
               else {
                    result = lf.Call();
               }
          }
          catch (NLua.Exceptions.LuaException e)
          {
               Debug.LogError(FormatException(e), gameObject);
          }
          return result;
     }

     public System.Object[] Call(string function)
     {
          return Call(function, null);
     }

     public static string FormatException(NLua.Exceptions.LuaException e)
     {
          string source = (string.IsNullOrEmpty(e.Source)) ? "<no source>" : e.Source.Substring(0, e.Source.Length - 2);
          return string.Format("{0}\nLua (at {2})", e.Message, string.Empty, source);
     }
}
